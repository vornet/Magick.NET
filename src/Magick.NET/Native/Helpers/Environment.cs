// Copyright Dirk Lemstra https://github.com/dlemstra/Magick.NET.
// Licensed under the Apache License, Version 2.0.
// <auto-generated/>
#nullable enable

using System;
using System.Security;
using System.Runtime.InteropServices;

namespace ImageMagick
{
    internal static partial class Environment
    {
        [SuppressUnmanagedCodeSecurity]
        private static unsafe class NativeMethods
        {
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            public static class X64
            {
                #if PLATFORM_AnyCPU
                static X64() { NativeLibraryLoader.Load(); }
                #endif
                [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_Initialize();
                [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_SetEnv(IntPtr name, IntPtr value);
            }
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            public static class X86
            {
                #if PLATFORM_AnyCPU
                static X86() { NativeLibraryLoader.Load(); }
                #endif
                [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_Initialize();
                [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_SetEnv(IntPtr name, IntPtr value);
            }
            #endif
            #if PLATFORM_Arm64 || PLATFORM_AnyCPU
            public static class Arm64
            {
                #if PLATFORM_AnyCPU
                static Arm64() { NativeLibraryLoader.Load(); }
                #endif
                [DllImport(NativeLibrary.Arm64Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_Initialize();
                [DllImport(NativeLibrary.Arm64Name, CallingConvention = CallingConvention.Cdecl)]
                public static extern void Environment_SetEnv(IntPtr name, IntPtr value);
            }
            #endif
        }
        private unsafe static class NativeEnvironment
        {
            public static void Initialize()
            {
                switch (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture)
                {
                #if PLATFORM_x64 || PLATFORM_AnyCPU
                case Architecture.X64:
                     NativeMethods.X64.Environment_Initialize();
                     break;
                #endif
                #if PLATFORM_x86 || PLATFORM_AnyCPU
                case Architecture.X86:
                     NativeMethods.X86.Environment_Initialize();
                     break;
                #endif
                #if PLATFORM_Arm64 || PLATFORM_AnyCPU
                case Architecture.Arm64:
                     NativeMethods.Arm64.Environment_Initialize();
                     break;
                #endif
                default:
                     throw new NotSupportedException("Processor architecture not supported.");
                }
            }
            public static void SetEnv(string? name, string? value)
            {
                using (var nameNative = UTF8Marshaler.CreateInstance(name))
                {
                    using (var valueNative = UTF8Marshaler.CreateInstance(value))
                    {
                        switch (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture)
                        {
                        #if PLATFORM_x64 || PLATFORM_AnyCPU
                        case Architecture.X64:
                             NativeMethods.X64.Environment_SetEnv(nameNative.Instance, valueNative.Instance);
                             break;
                        #endif
                        #if PLATFORM_x86 || PLATFORM_AnyCPU
                        case Architecture.X86:
                             NativeMethods.X86.Environment_SetEnv(nameNative.Instance, valueNative.Instance);
                             break;
                        #endif
                        #if PLATFORM_Arm64 || PLATFORM_AnyCPU
                        case Architecture.Arm64:
                             NativeMethods.Arm64.Environment_SetEnv(nameNative.Instance, valueNative.Instance);
                             break;
                        #endif
                        default:
                             throw new NotSupportedException("Processor architecture not supported.");
                        }
                    }
                }
            }
        }
    }
}
